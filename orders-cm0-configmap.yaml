apiVersion: v1
data:
  .env: ""
  __init__.py: ""
  Dockerfile: |
    FROM python:3.7.7

    WORKDIR /app

    ENV PYTHONDONTWRITEBYTECODE 1
    ENV PYTHONBUFFERED 1

    COPY requirements.txt .
    RUN pip install --no-cache-dir -r requirements.txt

    COPY . .
  init_db.py: |
    from tortoise import Tortoise, run_async

    async def init():
        #  Here we create a SQLite DB using file "db.sqlite3"
        #  also specify the app name of "models"
        #  which contain models from "models"
        await Tortoise.init(
            db_url='sqlite://db.sqlite3',
            modules={'models': ['models']}
        )
        # Generate the schema
        await Tortoise.generate_schemas()

    # run_async is a helper function to run simple async Tortoise scripts.
    run_async(init())
  main.py: |
    from typing import List

    from fastapi import FastAPI, Header
    from tortoise.contrib.fastapi import register_tortoise

    from models import Order_Pydantic, OrderIn_Pydantic, Orders


    app = FastAPI()


    @app.get('/api/orders', response_model=List[Order_Pydantic])
    async def get_orders(request_user_id: str = Header(None)):
        return await Order_Pydantic.from_queryset(
            Orders.filter(created_by=request_user_id)
        )


    @app.post('/api/orders', response_model=Order_Pydantic)
    async def create_user(order: OrderIn_Pydantic,
                          request_user_id: str = Header(None)):
        data = order.dict()
        data.update({'created_by': request_user_id})

        order_obj = await Orders.create(**data)
        return await Order_Pydantic.from_tortoise_orm(order_obj)


    register_tortoise(
        app,
        db_url='sqlite://:memory:',
        modules={'models': ['models']},
        generate_schemas=True,
        add_exception_handlers=True,
    )
  models.py: |
    from pydantic import BaseModel

    from tortoise import fields, models
    from tortoise.contrib.pydantic import pydantic_model_creator


    class Orders(models.Model):
        id = fields.IntField(pk=True)
        address = fields.TextField()
        item = fields.TextField()
        created_by = fields.IntField()
        created_at = fields.DatetimeField(auto_now_add=True)


    Order_Pydantic = pydantic_model_creator(Orders, name='Order')


    class OrderIn_Pydantic(BaseModel):
        address: str
        item: str
  requirements.txt: |
    fastapi==0.58.0
    uvicorn==0.11.5
    tortoise-orm==0.16.13

    # for test purposes
    flake8==3.8.3
    ipdb==0.13.2
    ipython==7.15.0
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: orders
  name: orders-cm0
